generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  clerkUserId  String        @unique // clerk user id
  email        String        @unique
  name         String?
  imageUrl     String?
  transactions Transaction[]
  accounts     Account[]
  budgets      Budget[]
  createdAt    DateTime      @default(now()) // Timestamp when the user was created, defaults to current time.
  updatedAt    DateTime      @updatedAt // Prisma will automatically update this field every time the record is updated.
  // By default, Prisma uses the model name as the table name.
  // This explicitly maps the model User to the table users in the database.

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0) // will ask inital balance while creating an account The money amount. Defaults to zero when creating an account.
  isDefault    Boolean       @default(false)
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
  @@map("accounts")
}

model Transaction {
  id                String             @id @default(uuid())
  type              TransactionType
  amount            Decimal
  description       String?
  date              DateTime
  category          String
  receiptUrl        String?
  isRecurring       Boolean            @default(false)
  recurringInterval RecurringInterval? // Only used if isRecurring is true
  nextRecurringDate DateTime? // Next date for recurring transaction
  lastProcessed     DateTime? // Last time this recurring transaction was processed
  status            TransactionStatus  @default(COMPLETED)
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId         String
  account           Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

model Budget {
  id            String    @id @default(uuid()) // 	Primary key auto-generated
  amount        Decimal
  lastAlertSent DateTime? // Track when the last alert was sent
  userId        String    @unique // (Each user has only one budget)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Foreign key relationship
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId]) // Creates a database index,  A database index is like a "shortcut" or "fast lookup table" for your database.
  @@map("budgets") // 	Maps to a specific table name
}

// ✅ When you search for something (example: SELECT * FROM transactions WHERE userId = '123'),
// without an index, the database would have to scan every row one by one — even if there are 1 million transactions.
// ✅ If there is an index on userId, the database can immediately find the matching records, much faster (like a dictionary where you quickly find a word without reading the whole book).

enum TransactionType {
  INCOME
  EXPENSE
}

enum AccountType {
  CURRENT
  SAVINGS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
